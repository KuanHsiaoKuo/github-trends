{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/hanford/dev/trends/packages/www/helpers/with-apollo.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./init-apollo\";\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(props) {\n      const {\n        Component,\n        router,\n        ctx\n      } = props;\n      const host = ctx.req.headers.host;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(props);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apollo = initApollo(host, {});\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(___EmotionJSX(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable: no-console\n          console.error(\"Error while running `getDataFromTree`\", error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        host,\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"apolloClient\", void 0);\n\n      this.apolloClient = initApollo(props.host, props.apolloState);\n    }\n\n    render() {\n      return ___EmotionJSX(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", \"withApollo(App)\"), _temp;\n});","map":{"version":3,"sources":["/Users/hanford/dev/trends/packages/www/helpers/with-apollo.tsx"],"names":["Head","React","getDataFromTree","initApollo","App","Apollo","Component","getInitialProps","props","router","ctx","host","req","headers","appProps","apollo","process","browser","error","console","rewind","apolloState","cache","extract","constructor","apolloClient","render"],"mappings":";;;;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AAE1C,iBAAaC,eAAb,CAA6BC,KAA7B,EAAoC;AAClC,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA,MAAb;AAAqBC,QAAAA;AAArB,UAA6BF,KAAnC;AACA,YAAMG,IAAI,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBF,IAA7B;AAEA,UAAIG,QAAQ,GAAG,EAAf;;AACA,UAAIV,GAAG,CAACG,eAAR,EAAyB;AACvBO,QAAAA,QAAQ,GAAG,MAAMV,GAAG,CAACG,eAAJ,CAAoBC,KAApB,CAAjB;AACD,OAPiC,CASlC;AACA;;;AACA,YAAMO,MAAM,GAAGZ,UAAU,CAACQ,IAAD,EAAO,EAAP,CAAzB;;AACA,UAAI,CAACK,OAAO,CAACC,OAAb,EAAsB;AACpB,YAAI;AACF;AACA,gBAAMf,eAAe,CACnB,cAAC,GAAD,eACMY,QADN;AAEE,YAAA,SAAS,EAAER,SAFb;AAGE,YAAA,MAAM,EAAEG,MAHV;AAIE,YAAA,YAAY,EAAEM,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADmB,CAArB;AAQD,SAVD,CAUE,OAAOG,KAAP,EAAc;AACd;AACA;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAjBmB,CAmBpB;AACA;;;AACAlB,QAAAA,IAAI,CAACoB,MAAL;AACD,OAlCiC,CAoClC;;;AACA,YAAMC,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKT,QADL;AAEEH,QAAAA,IAFF;AAGEU,QAAAA;AAHF;AAKD;;AAIDG,IAAAA,WAAW,CAAChB,KAAD,EAAQ;AACjB,YAAMA,KAAN;;AADiB;;AAEjB,WAAKiB,YAAL,GAAoBtB,UAAU,CAACK,KAAK,CAACG,IAAP,EAAaH,KAAK,CAACa,WAAnB,CAA9B;AACD;;AAEDK,IAAAA,MAAM,GAAG;AACP,aAAO,cAAC,GAAD,eAAS,KAAKlB,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKiB,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAzDyC,GAA5C,yCACuB,iBADvB;AA2DD,CA5DD","sourcesContent":["import { ApolloClient } from \"apollo-boost\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./init-apollo\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = \"withApollo(App)\";\n    static async getInitialProps(props) {\n      const { Component, router, ctx } = props;\n      const host = ctx.req.headers.host;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(props);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo(host, {});\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable: no-console\n          console.error(\"Error while running `getDataFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        host,\n        apolloState\n      };\n    }\n\n    apolloClient: ApolloClient<{}> | null;\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.host, props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}