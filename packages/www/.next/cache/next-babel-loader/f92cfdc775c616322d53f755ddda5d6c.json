{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/hanford/dev/trends/packages/www/helpers/with-apollo.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./init-apollo\";\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(props) {\n          var Component, router, ctx, host, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = props.Component, router = props.router, ctx = props.ctx;\n                  host = ctx.req.headers.host;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return App.getInitialProps(props);\n\n                case 6:\n                  appProps = _context.sent;\n\n                case 7:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apollo = initApollo(host, {});\n\n                  if (process.browser) {\n                    _context.next = 18;\n                    break;\n                  }\n\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return getDataFromTree(___EmotionJSX(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 26\n                    },\n                    __self: this\n                  })));\n\n                case 12:\n                  _context.next = 17;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](9);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  // tslint:disable: no-console\n                  console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n                case 17:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 18:\n                  // Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    host: host,\n                    apolloState: apolloState\n                  }));\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[9, 14]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.host, props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return ___EmotionJSX(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"withApollo(App)\"), _temp;\n});","map":{"version":3,"sources":["/Users/hanford/dev/trends/packages/www/helpers/with-apollo.tsx"],"names":["Head","React","getDataFromTree","initApollo","App","props","Component","router","ctx","host","req","headers","appProps","getInitialProps","apollo","process","browser","console","error","rewind","apolloState","cache","extract","apolloClient"],"mappings":";;;;;;;;;;;;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAE+BC,KAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAGYC,kBAAAA,SAHZ,GAGuCD,KAHvC,CAGYC,SAHZ,EAGuBC,MAHvB,GAGuCF,KAHvC,CAGuBE,MAHvB,EAG+BC,GAH/B,GAGuCH,KAHvC,CAG+BG,GAH/B;AAIUC,kBAAAA,IAJV,GAIiBD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBF,IAJjC;AAMQG,kBAAAA,QANR,GAMmB,EANnB;;AAAA,uBAOQR,GAAG,CAACS,eAPZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAQuBT,GAAG,CAACS,eAAJ,CAAoBR,KAApB,CARvB;;AAAA;AAQMO,kBAAAA,QARN;;AAAA;AAWI;AACA;AACME,kBAAAA,MAbV,GAamBX,UAAU,CAACM,IAAD,EAAO,EAAP,CAb7B;;AAAA,sBAcSM,OAAO,CAACC,OAdjB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAiBcd,eAAe,CACnB,cAAC,GAAD,eACMU,QADN;AAEE,oBAAA,SAAS,EAAEN,SAFb;AAGE,oBAAA,MAAM,EAAEC,MAHV;AAIE,oBAAA,YAAY,EAAEO,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CAjB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BQ;AACA;AACA;AACA;AACAG,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AA9BR;AAiCM;AACA;AACAlB,kBAAAA,IAAI,CAACmB,MAAL;;AAnCN;AAsCI;AACMC,kBAAAA,WAvCV,GAuCwBN,MAAM,CAACO,KAAP,CAAaC,OAAb,EAvCxB;AAAA,qEA0CSV,QA1CT;AA2CMH,oBAAAA,IAAI,EAAJA,IA3CN;AA4CMW,oBAAAA,WAAW,EAAXA;AA5CN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkDE,oBAAYf,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB;;AAEjB,YAAKkB,YAAL,GAAoBpB,UAAU,CAACE,KAAK,CAACI,IAAP,EAAaJ,KAAK,CAACe,WAAnB,CAA9B;AAFiB;AAGlB;;AArDH;AAAA;AAAA,+BAuDW;AACP,eAAO,cAAC,GAAD,eAAS,KAAKf,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKkB,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AAzDH;;AAAA;AAAA,IAA4BtB,KAAK,CAACK,SAAlC,0CACuB,iBADvB;AA2DD,CA5DD","sourcesContent":["import { ApolloClient } from \"apollo-boost\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./init-apollo\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = \"withApollo(App)\";\n    static async getInitialProps(props) {\n      const { Component, router, ctx } = props;\n      const host = ctx.req.headers.host;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(props);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo(host, {});\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable: no-console\n          console.error(\"Error while running `getDataFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        host,\n        apolloState\n      };\n    }\n\n    apolloClient: ApolloClient<{}> | null;\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.host, props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}