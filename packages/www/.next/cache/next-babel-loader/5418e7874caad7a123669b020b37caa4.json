{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hanford/dev/trends/packages/www/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query trendingRepos($language: String!, $time: Int!) {\\n    repos(language: $language, time: $time) {\\n      id\\n      name\\n      forks\\n      language\\n      full_name\\n      description\\n      stargazers_count\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Index from \"../components/index\";\nimport getQueryData from \"../helpers/query-data\";\n\nvar IndexPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(IndexPage, _React$Component);\n\n  function IndexPage() {\n    _classCallCheck(this, IndexPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IndexPage).apply(this, arguments));\n  }\n\n  _createClass(IndexPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          language = _this$props.language,\n          time = _this$props.time,\n          dark = _this$props.dark;\n      return ___EmotionJSX(Query, {\n        query: GET_REPOS,\n        variables: {\n          language: language,\n          time: time\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, function (_ref) {\n        var data = _ref.data;\n        return ___EmotionJSX(Index, _extends({\n          repos: data && data.repos || [],\n          dark: dark\n        }, _this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }));\n      });\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var query, _getQueryData, language, time, dark;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = ctx.query;\n                _getQueryData = getQueryData(query), language = _getQueryData.language, time = _getQueryData.time, dark = _getQueryData.dark;\n                return _context.abrupt(\"return\", {\n                  time: time,\n                  language: language,\n                  dark: dark\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IndexPage;\n}(React.Component);\n\nexport default IndexPage;\nvar GET_REPOS = gql(_templateObject());","map":{"version":3,"sources":["/Users/hanford/dev/trends/packages/www/pages/index.tsx"],"names":["gql","React","Query","Index","getQueryData","IndexPage","props","language","time","dark","GET_REPOS","data","repos","ctx","query","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAGA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;IAkBMC,S;;;;;;;;;;;;;6BAYK;AAAA;;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,IADX,eACWA,IADX;AAAA,UACiBC,IADjB,eACiBA,IADjB;AAGP,aACE,cAAC,KAAD;AAAwB,QAAA,KAAK,EAAEC,SAA/B;AAA0C,QAAA,SAAS,EAAE;AAAEH,UAAAA,QAAQ,EAARA,QAAF;AAAYC,UAAAA,IAAI,EAAJA;AAAZ,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA,YAAGG,IAAH,QAAGA,IAAH;AAAA,eACC,cAAC,KAAD;AACE,UAAA,KAAK,EAAGA,IAAI,IAAIA,IAAI,CAACC,KAAd,IAAwB,EADjC;AAEE,UAAA,IAAI,EAAEH;AAFR,WAGM,KAAI,CAACH,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAAA,OADH,CADF;AAWD;;;;;;gDAzB4BO,G;;;;;;;AACnBC,gBAAAA,K,GAAUD,G,CAAVC,K;gCACyBV,YAAY,CAACU,KAAD,C,EAArCP,Q,iBAAAA,Q,EAAUC,I,iBAAAA,I,EAAMC,I,iBAAAA,I;iDAEjB;AACLD,kBAAAA,IAAI,EAAJA,IADK;AAELD,kBAAAA,QAAQ,EAARA,QAFK;AAGLE,kBAAAA,IAAI,EAAJA;AAHK,iB;;;;;;;;;;;;;;;;;;;EALaR,KAAK,CAACc,S;;AA6B9B,eAAeV,SAAf;AAEA,IAAMK,SAAS,GAAGV,GAAH,mBAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\n\nimport { Repo } from \"../@types/graphql\";\nimport Index from \"../components/index\";\nimport getQueryData from \"../helpers/query-data\";\n\ninterface Data {\n  repos: Repo[];\n}\n\ninterface Variables {\n  language: string;\n  time: number;\n}\n\ninterface Props {\n  children: React.ReactNode;\n  language: string;\n  time: number;\n  dark: boolean;\n}\n\nclass IndexPage extends React.Component<Props> {\n  static async getInitialProps(ctx: any) {\n    const { query } = ctx;\n    const { language, time, dark } = getQueryData(query);\n\n    return {\n      time,\n      language,\n      dark\n    };\n  }\n\n  render() {\n    const { language, time, dark } = this.props;\n\n    return (\n      <Query<Data, Variables> query={GET_REPOS} variables={{ language, time }}>\n        {({ data }) => (\n          <Index\n            repos={(data && data.repos) || []}\n            dark={dark}\n            {...this.props}\n          />\n        )}\n      </Query>\n    );\n  }\n}\n\nexport default IndexPage;\n\nconst GET_REPOS = gql`\n  query trendingRepos($language: String!, $time: Int!) {\n    repos(language: $language, time: $time) {\n      id\n      name\n      forks\n      language\n      full_name\n      description\n      stargazers_count\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}