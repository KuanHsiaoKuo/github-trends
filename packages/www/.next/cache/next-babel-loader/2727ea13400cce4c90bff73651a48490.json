{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/hanford/dev/trends/packages/www/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Index from \"../components/index\";\nimport getQueryData from \"../helpers/query-data\";\n\nclass IndexPage extends React.Component {\n  static async getInitialProps(ctx) {\n    const {\n      query\n    } = ctx;\n    const {\n      language,\n      time,\n      dark\n    } = getQueryData(query);\n    return {\n      time,\n      language,\n      dark\n    };\n  }\n\n  render() {\n    const {\n      language,\n      time,\n      dark\n    } = this.props;\n    return ___EmotionJSX(Query, {\n      query: GET_REPOS,\n      variables: {\n        language,\n        time\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, ({\n      data\n    }) => ___EmotionJSX(Index, _extends({\n      repos: data && data.repos || [],\n      dark: dark\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default IndexPage;\nconst GET_REPOS = gql`\n  query trendingRepos($language: String!, $time: Int!) {\n    repos(language: $language, time: $time) {\n      id\n      name\n      forks\n      language\n      full_name\n      description\n      stargazers_count\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/hanford/dev/trends/packages/www/pages/index.tsx"],"names":["gql","React","Query","Index","getQueryData","IndexPage","Component","getInitialProps","ctx","query","language","time","dark","render","props","GET_REPOS","data","repos"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAGA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAkBA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAA+C;AAC7C,eAAaC,eAAb,CAA6BC,GAA7B,EAAuC;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAlB;AACA,UAAM;AAAEE,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA;AAAlB,QAA2BR,YAAY,CAACK,KAAD,CAA7C;AAEA,WAAO;AACLE,MAAAA,IADK;AAELD,MAAAA,QAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEH,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA;AAAlB,QAA2B,KAAKE,KAAtC;AAEA,WACE,cAAC,KAAD;AAAwB,MAAA,KAAK,EAAEC,SAA/B;AAA0C,MAAA,SAAS,EAAE;AAAEL,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACC,cAAC,KAAD;AACE,MAAA,KAAK,EAAGA,IAAI,IAAIA,IAAI,CAACC,KAAd,IAAwB,EADjC;AAEE,MAAA,IAAI,EAAEL;AAFR,OAGM,KAAKE,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,CADF;AAWD;;AA1B4C;;AA6B/C,eAAeT,SAAf;AAEA,MAAMU,SAAS,GAAGf,GAAI;;;;;;;;;;;;CAAtB","sourcesContent":["import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\n\nimport { Repo } from \"../@types/graphql\";\nimport Index from \"../components/index\";\nimport getQueryData from \"../helpers/query-data\";\n\ninterface Data {\n  repos: Repo[];\n}\n\ninterface Variables {\n  language: string;\n  time: number;\n}\n\ninterface Props {\n  children: React.ReactNode;\n  language: string;\n  time: number;\n  dark: boolean;\n}\n\nclass IndexPage extends React.Component<Props> {\n  static async getInitialProps(ctx: any) {\n    const { query } = ctx;\n    const { language, time, dark } = getQueryData(query);\n\n    return {\n      time,\n      language,\n      dark\n    };\n  }\n\n  render() {\n    const { language, time, dark } = this.props;\n\n    return (\n      <Query<Data, Variables> query={GET_REPOS} variables={{ language, time }}>\n        {({ data }) => (\n          <Index\n            repos={(data && data.repos) || []}\n            dark={dark}\n            {...this.props}\n          />\n        )}\n      </Query>\n    );\n  }\n}\n\nexport default IndexPage;\n\nconst GET_REPOS = gql`\n  query trendingRepos($language: String!, $time: Int!) {\n    repos(language: $language, time: $time) {\n      id\n      name\n      forks\n      language\n      full_name\n      description\n      stargazers_count\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}