{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(host, initialState) {\n  const url = process.env.NODE_ENV === \"production\" ? `https://${host}` : \"http://localhost:2999\";\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: `${url}/api/graphql`,\n      credentials: \"same-origin\"\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(host, initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(host, initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(host, initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/hanford/dev/trends/packages/www/helpers/init-apollo.tsx"],"names":["ApolloClient","HttpLink","InMemoryCache","fetch","apolloClient","process","browser","global","create","host","initialState","url","env","NODE_ENV","connectToDevTools","ssrMode","link","uri","credentials","cache","restore","initApollo"],"mappings":"AAAA,SACEA,YADF,EAEEC,QAFF,EAGEC,aAHF,QAKO,cALP;AAMA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,IAAIC,YAAqC,GAAG,IAA5C,C,CAEA;;AACA,IAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACpBC,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AAED,SAASK,MAAT,CAAgBC,IAAhB,EAA8BC,YAA9B,EAA0E;AACxE,QAAMC,GAAG,GACPN,OAAO,CAACO,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACK,WAAUJ,IAAK,EADpB,GAEI,uBAHN;AAKA,SAAO,IAAIT,YAAJ,CAAiB;AACtBc,IAAAA,iBAAiB,EAAET,OAAO,CAACC,OADL;AAEtBS,IAAAA,OAAO,EAAE,CAACV,OAAO,CAACC,OAFI;AAEK;AAC3BU,IAAAA,IAAI,EAAE,IAAIf,QAAJ,CAAa;AACjBgB,MAAAA,GAAG,EAAG,GAAEN,GAAI,cADK;AAEjBO,MAAAA,WAAW,EAAE;AAFI,KAAb,CAHgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4BV,YAAY,IAAI,EAA5C;AAPe,GAAjB,CAAP;AASD;;AAED,eAAe,SAASW,UAAT,CACbZ,IADa,EAEbC,YAFa,EAGb;AACA;AACA;AACA,MAAI,CAACL,OAAO,CAACC,OAAb,EAAsB;AACpB,WAAOE,MAAM,CAACC,IAAD,EAAOC,YAAP,CAAb;AACD,GALD,CAOA;;;AACA,MAAI,CAACN,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGI,MAAM,CAACC,IAAD,EAAOC,YAAP,CAArB;AACD;;AAED,SAAON,YAAP;AACD","sourcesContent":["import {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject\n} from \"apollo-boost\";\nimport fetch from \"isomorphic-fetch\";\n\nlet apolloClient: ApolloClient<{}> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(host: string, initialState: NormalizedCacheObject | null) {\n  const url =\n    process.env.NODE_ENV === \"production\"\n      ? `https://${host}`\n      : \"http://localhost:2999\";\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: `${url}/api/graphql`,\n      credentials: \"same-origin\"\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(\n  host: string,\n  initialState: NormalizedCacheObject | null\n) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(host, initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(host, initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}